import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
import sqlite3
import datetime
import re
import asyncio

from aiogram.fsm.storage.memory import MemoryStorage


##logging.basicConfig(level=logging.INFO)
##logger = logging.getLogger(name)

BOT_TOKEN = "7627437523:AAH9VzKRBuocnfaNmnaYnDEU0DWg5cEnCqw"


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()






# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('finance_olympiad.db')
cursor = conn.cursor()


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
cursor.execute('''
CREATE TABLE IF NOT EXISTS registrations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    full_name TEXT NOT NULL,
    grade INTEGER NOT NULL,
    school TEXT NOT NULL,
    city TEXT NOT NULL,
    email TEXT NOT NULL,
    phone TEXT NOT NULL,
    teacher_name TEXT,
    registration_date TEXT NOT NULL,
    UNIQUE(user_id)
)
''')
conn.commit()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class RegistrationStates(StatesGroup):
    waiting_for_full_name = State()
    waiting_for_grade = State()
    waiting_for_school = State()
    waiting_for_city = State()
    waiting_for_email = State()
    waiting_for_phone = State()
    waiting_for_teacher = State()

# –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥
async def set_commands(bot: Bot):
    commands = [
        types.BotCommand(command="/start", description="–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
        types.BotCommand(command="/register", description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –æ–ª–∏–º–ø–∏–∞–¥—É"),
        types.BotCommand(command="/my_data", description="–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ"),
        types.BotCommand(command="/cancel", description="–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"),
        types.BotCommand(command="/info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ª–∏–º–ø–∏–∞–¥–µ")
    ]
    await bot.set_my_commands(commands)


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –æ–ª–∏–º–ø–∏–∞–¥—É –§–∏–Ω–∞—Ç–ª–æ–Ω.\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /register."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register
@dp.message(Command("register"))
async def cmd_register(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute("SELECT * FROM registrations WHERE user_id = ?", (message.from_user.id,))
    if cursor.fetchone():
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –æ–ª–∏–º–ø–∏–∞–¥—É!")
        return
    
    await state.set_state(RegistrationStates.waiting_for_full_name)
    await message.answer(
        "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –æ–ª–∏–º–ø–∏–∞–¥—É –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏</b>\n\n"
        "–®–∞–≥ 1 –∏–∑ 7\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–§–ò–û</b> (–ø–æ–ª–Ω–æ—Å—Ç—å—é, –∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö):",
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        cursor.execute("DELETE FROM registrations WHERE user_id = ?", (message.from_user.id,))
        conn.commit()
        await message.answer("–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    
    await state.clear()
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /register")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –§–ò–û
@dp.message(RegistrationStates.waiting_for_full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    if len(message.text.split()) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)")
        return
    
    await state.update_data(full_name=message.text)
    await state.set_state(RegistrationStates.waiting_for_grade)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–ª–∞—Å—Å–∞–º–∏
    builder = ReplyKeyboardBuilder()
    grades = ["8", "9", "10", "11"]
    for grade in grades:
        builder.add(KeyboardButton(text=grade))
    builder.adjust(2)
    
    await message.answer(
        "–®–∞–≥ 2 –∏–∑ 7\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à <b>–∫–ª–∞—Å—Å</b>:",
        parse_mode="HTML",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞—Å—Å–∞
@dp.message(RegistrationStates.waiting_for_grade)
async def process_grade(message: types.Message, state: FSMContext):
    if message.text not in ["8", "9", "10", "11"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (8-11)")
        return
    
    await state.update_data(grade=int(message.text))
    await state.set_state(RegistrationStates.waiting_for_school)
    await message.answer(
        "–®–∞–≥ 3 –∏–∑ 7\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π <b>—à–∫–æ–ª—ã</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–ë–û–£ –õ–∏—Ü–µ–π ‚Ññ1 –≥. –ú–æ—Å–∫–≤–∞):",
        parse_mode="HTML",
        reply_markup=types.ReplyKeyboardRemove()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∫–æ–ª—ã
@dp.message(RegistrationStates.waiting_for_school)
async def process_school(message: types.Message, state: FSMContext):
    if len(message.text) < 5:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return
    
    await state.update_data(school=message.text)
    await state.set_state(RegistrationStates.waiting_for_city)
    await message.answer(
        "–®–∞–≥ 4 –∏–∑ 7\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–≥–æ—Ä–æ–¥</b> –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:",
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ä–æ–¥–∞
@dp.message(RegistrationStates.waiting_for_city)
async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await state.set_state(RegistrationStates.waiting_for_email)
    await message.answer(
        "–®–∞–≥ 5 –∏–∑ 7\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>email</b> –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: example@mail.ru):",
        parse_mode="HTML"
    )



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ email
@dp.message(RegistrationStates.waiting_for_email)
async def process_email(message: types.Message, state: FSMContext):
    if not re.match(r"[^@]+@[^@]+\.[^@]+", message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email (–Ω–∞–ø—Ä–∏–º–µ—Ä: example@mail.ru)")
        return
    
    await state.update_data(email=message.text)
    await state.set_state(RegistrationStates.waiting_for_phone)
    await message.answer(
        "–®–∞–≥ 6 –∏–∑ 7\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX):",
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(RegistrationStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text
    if not re.match(r"^\+7\d{10}$", phone):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79161234567)")
        return
    
    await state.update_data(phone=phone)
    await state.set_state(RegistrationStates.waiting_for_teacher)
    await message.answer(
        "–®–∞–≥ 7 –∏–∑ 7\n"
        "–í–≤–µ–¥–∏—Ç–µ <b>–§–ò–û –≤–∞—à–µ–≥–æ —É—á–∏—Ç–µ–ª—è</b> –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ/–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):",
        parse_mode="HTML"
    )

@dp.message(RegistrationStates.waiting_for_teacher)
async def process_teacher(message: types.Message, state: FSMContext):
    teacher_name = message.text
    if message.text.lower() != "–Ω–µ—Ç":
         if len(message.text) > 50:
            await message.answer("–ò–º—è —É—á–∏—Ç–µ–ª—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–Ω–µ—Ç'.")
            return

        

        
        
         teacher_name = message.text
    else:
        teacher_name = None
    
    data = await state.get_data()


    try:
        # Save registration to the database
        cursor.execute(
            "INSERT INTO registrations (user_id, full_name, grade, school, city, email, phone, teacher_name, registration_date) "
            "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
            (
                message.from_user.id,
                data['full_name'],
                data['grade'],
                data['school'],
                data['city'],
                data['email'],
                data['phone'],
                teacher_name,
                datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            )
        )
        conn.commit()

        await state.clear()

        # Retrieve user data for confirmation message
        cursor.execute(
            "SELECT * FROM registrations WHERE user_id = ?", (message.from_user.id,)
        )
        registration = cursor.fetchone()

        # Build the response message with user data
        response = (
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n"
            "–í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"–§–ò–û: {registration[1]}\n"  # Corrected index from 2 to 1
            f"–ö–ª–∞—Å—Å: {registration[2]}\n"  # Corrected index from 3 to 2
            f"–®–∫–æ–ª–∞: {registration[3]}\n"  # Corrected index from 4 to 3
            f"–ì–æ—Ä–æ–¥: {registration[4]}\n"  # Corrected index from 5 to 4
            f"Email: {registration[5]}\n"  # Corrected index from 6 to 5
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {registration[6]}\n"  # Corrected index from 7 to 6
        )

        if registration[7]:  # Corrected index from 8 to 7
            response += f"–£—á–∏—Ç–µ–ª—å: {registration[7]}\n"  # Corrected index from 8 to 7

        response += (
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration[8]}\n" #Date is 8
        )

        await message.answer(response) # Show user data after registration
    except Exception as e:
        logging.error(f"Error processing teacher information or storing data: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_data
@dp.message(Command("my_data"))
async def cmd_my_data(message: types.Message):
    cursor.execute(
        "SELECT * FROM registrations WHERE user_id = ?",
        (message.from_user.id,)
    )
    registration = cursor.fetchone()
    
    if not registration:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register")
        return
    
    response = (
        "üìã <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
        f"üë§ <b>–§–ò–û:</b> {registration[2]}\n"
        f"üè´ <b>–ö–ª–∞—Å—Å:</b> {registration[3]}\n"
        f"üìö <b>–®–∫–æ–ª–∞:</b> {registration[4]}\n"
        f"üåÜ <b>–ì–æ—Ä–æ–¥:</b> {registration[5]}\n"
        f"üìß <b>Email:</b> {registration[6]}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {registration[7]}\n"
    )
    
    if registration[8]:
        response += f"üë©‚Äçüè´ <b>–£—á–∏—Ç–µ–ª—å:</b> {registration[8]}\n"
    
    response += (
        f"\nüìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> "
        f"{datetime.datetime.strptime(registration[9], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')}\n\n"
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –æ—Ç–º–µ–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (/cancel) –∏ –ø—Ä–æ–π–¥–∏—Ç–µ –µ–µ –∑–∞–Ω–æ–≤–æ."
    )
    
    await message.answer(response, parse_mode="HTML")

async def main():
    logging.basicConfig(level=logging.INFO)  # Turn on logging

    try:
        await set_commands(bot)
        await dp.start_polling(bot)
    except Exception as e:
        logging.exception(f"Error in main: {e}")

if __name__ == "__main__":
    asyncio.run(main())
